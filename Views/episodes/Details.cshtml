@model NetflixClone.Models.episode

@{
    ViewBag.Title = "Episodes Details";
    Layout = "~/Views/Shared/_Layout.cshtml";
    NetflixClone.Models.Model1 db = new NetflixClone.Models.Model1();
}
}


<head>
    <link href="~/Content/ndson_style.css" rel="stylesheet">
</head>

<style>
    .video-background {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        overflow: hidden;
        z-index: -1;
    }

    #trailer-video {
        width: 100%;
        height: 100%;
        object-fit: cover;
    }


    #trailer-video {
        pointer-events: none;
    }


        #trailer-video::-webkit-media-controls-start-playback-button {
            display: none;
        }

    .movie-details-container {
        min-height: 100vh;
        height: auto;
        flex-direction: column;
        justify-content: center;
        align-items: center;
    }

    .slick-bg.s-bg-1 {
        height: auto !important;
    }
</style>

<!-- slider starts  -->
<section id="home" class="iq-main-slider p-0">
    <div id="home-slider" class="slider m-0 p-0">
        <div class="slide slick-bg s-bg-1">
            <div class="video-background">
                <iframe id="trailer-video" allow="autoplay; encrypted-media" allowfullscreen></iframe>
            </div>
            <div class="container-fluid position-relative movie-details-container">
                <div class="slider-inner">
                    <div class="row align-items-center">
                        <div class="col-xl-6 col-lg-12 col-md-12">
                            <a href="javascript:void(0)">
                                <div class="channel-logo" data-animation-in="fadeInLeft" data-delay-in="0.5">
                                    <img src="~/Content/SingleMovie/images/logo.png" class="c-logo" alt="" />
                                </div>
                            </a>
                            <h1 class="slider-text big-title title text-uppercase" data-animation-in="fadeInLeft"
                                data-delay-in="0.6">
                                @Html.DisplayFor(model => model.episodeName)
                            </h1>
                            <div class="d-flex flex-wrap align-items-center fadeInLeft animated" data-animation-in="fadeInLeft"
                                 style="opacity: 1">
                                <div class="slider-ratting d-flex align-items-center mr-4 mt-2 mt-md-3">
                                    <ul class="ratting-start p-0 m-0 list-inline text-primary d-flex align-items-center justify-content-left">
                                        <li><i class="fa fa-star"></i></li>
                                        <li><i class="fa fa-star"></i></li>
                                        <li><i class="fa fa-star"></i></li>
                                        <li><i class="fa fa-star"></i></li>
                                        <li><i class="fa fa-star-half"></i></li>
                                    </ul>
                                    <span class="text-white ml-2">7.3(imbd)</span>
                                </div>
                                <div class="d-flex align-items-center mt-2 mt-md-3">
                                    <span class="badge badge-secondary p-2">16+</span>
                                    <span class="ml-3">Season: @Html.DisplayFor(model => model.episodeNumber)</span>
                                </div>
                            </div>
                            <p data-animation-in="fadeInUp" style="white-space: pre-wrap;">
                                @Html.DisplayFor(model => model.overview)
                            </p>
                            <div class="trending-list" data-animation-in="fadeInUp" data-delay-in="1.2">
                                <div class="text-primary title starring">
                                    Duration:
                                    <span class="text-body">
                                        @Html.DisplayFor(model => model.runtime) (min)
                                    </span>
                                </div>
                                <div class="text-primary title tag">
                                    Vote Average :
                                    <span class="text-body">@Html.DisplayFor(model => model.voteAverage) </span>
                                </div>
                                <div class="text-primary title tag">
                                    Vote Count :
                                    <span class="text-body">@Html.DisplayFor(model => model.voteCount) </span>
                                </div>
                            </div>
                            <div class="d-flex align-items-center r-mb-23 mt-4" data-animation-in="fadeInUp" data-delay-in="1.2">
                                <a href="@Url.Action("PlayMovie", "movies", new { id = 13 })" id="playNowBtn" class="btn btn-hover iq-button"><i class="fa fa-play mr-3"></i>Play Now</a>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-xl-5 col-lg-12 col-md-12 trailor-video">
                    <a href="@Url.Action("PlayMovie", "movies", new { id = 13 })" class="video-open playbtn">
                        <img src="~/Content/SingleMovie/images/play.png" class="play" alt="" />
                        <span class="w-trailor">Watch</span>
                    </a>
                </div>
            </div>
        </div>
    </div>
</section>
<!-- slider ends -->
<!-- main content starts  -->
<div class="main-content">
    <!--Slides of episodes' captures-->
    <section id="iq-suggested" class="s-margin">
        <div class="container-fluid">
            <div class="row">
                <div class="col-sm-12 overflow-hidden">
                    <div class="iq-main-header d-flex align-items-center justify-content-between">
                        <h4 class="main-title">Episode captures</h4>
                    </div>
                    <div class="favorite-contens">
                        <ul class="favorites-slider list-inline row p-0 mb-0">
                        </ul>
                    </div>
                </div>
            </div>
        </div>
    </section>
    <!--SLides of episodes' trailers-->
    <section id="iq-trailers" class="s-margin">
        <div class="container-fluid">
            <div class="row">
                <div class="col-sm-12 overflow-hidden">
                    <div class="iq-main-header d-flex align-items-center justify-content-between">
                        <h4 class="main-title">Episode trailers</h4>
                    </div>
                    <div class="favorite-contens">
                        <ul class="trailers-slider list-inline row p-0 mb-0">
                        </ul>
                    </div>
                </div>
            </div>
        </div>
    </section>
</div>
<!-- main content ends  -->
<!--=====Scripts part=====-->
<!--Display image as background-->
<script>
    const apiKey = '4c7a48492227a8ce26dceb363ea366cb';
    const seriesId = '@Model.serieID';
    const seasonNumber = 1;
    const episodeNumber = 1;
    const movieDetailsContainer = document.querySelector('.movie-details-container');

    fetch(`https://api.themoviedb.org/3/tv/${seriesId}/season/${seasonNumber}/episode/${episodeNumber}/images?api_key=${apiKey}`)
        .then(response => response.json())
        .then(data => {
            const stills = data.stills;

            if (stills.length > 0) {
                const randomStillIndex = Math.floor(Math.random() * stills.length);
                const stillImagePath = `https://image.tmdb.org/t/p/original/${stills[randomStillIndex].file_path}`;
                movieDetailsContainer.style.backgroundImage = `url(${stillImagePath})`;
            } else {
                console.warn('No still images found for this episode.');
            }
        })
        .catch(error => console.error('Error fetching episode images:', error));
</script>
<!---->
<!--Display episode's images in a slider-->
<script>
    const episodeCapturesContainer = document.querySelector('.favorites-slider');

    fetch(`https://api.themoviedb.org/3/tv/${seriesId}/season/${seasonNumber}/episode/${episodeNumber}/images?api_key=${apiKey}`)
        .then(response => response.json())
        .then(data => {
            const stills = data.stills;

            if (stills.length > 0) {
                stills.forEach(still => {
                    const imagePath = `https://image.tmdb.org/t/p/original/${still.file_path}`;

                    // Create slide item
                    const listItem = document.createElement('li');
                    listItem.classList.add('slide-item');

                    // Create image element
                    const imageElement = document.createElement('img');
                    imageElement.src = imagePath;
                    imageElement.classList.add('img-fluid');

                    // Add image to slide item
                    listItem.appendChild(imageElement);

                    // Append slide item to container
                    episodeCapturesContainer.appendChild(listItem);
                });
            } else {
                console.warn('No still images found for this episode.');
            }
        })
        .catch(error => console.error('Error fetching episode images:', error));
</script>
<!---->
<!--Display episode's images in a slider-->
<script>
    const trailersContainer = document.querySelector('.trailers-slider');

    fetch(`https://api.themoviedb.org/3/tv/${seriesId}/season/${seasonNumber}/episode/${episodeNumber}/videos?api_key=${apiKey}`)
        .then(response => response.json())
        .then(data => {
            const videos = data.results;

            if (videos.length > 0) {
                videos.forEach(video => {
                    const key = video.key;
                    const videoUrl = `https://www.youtube.com/watch?v=${key}`;

                    // Create slide item
                    const listItem = document.createElement('li');
                    listItem.classList.add('slide-item');

                    // Create video element (iframe)
                    const videoElement = document.createElement('iframe');
                    videoElement.width = '280';
                    videoElement.height = '157';
                    videoElement.src = videoUrl;
                    videoElement.allowFullscreen = true;

                    // Add video to slide item
                    listItem.appendChild(videoElement);

                    // Append slide item to container
                    trailersContainer.appendChild(listItem);
                });
            } else {
                console.warn('No trailers found for this episode.');
            }
        })
        .catch(error => console.error('Error fetching episode trailers:', error));
</script>
<!---->
