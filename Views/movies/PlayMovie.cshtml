@model NetflixClone.Models.movie

@{
    ViewBag.Tittle = "Playing movie";
}

<head>
    <title>@Html.DisplayFor(m => m.movieName)</title>
    <link rel="stylesheet" href="https://cdn.plyr.io/3.7.8/plyr.css" />
    <link rel="stylesheet" href="/css/all.min.css" />
    <link rel="stylesheet" href="/css/animate.min.css" />
    <link rel="stylesheet" href="/css/bootstrap.min.css" />
    <link rel="stylesheet" href="/css/magnific-popup.css" />
    <link rel="stylesheet" href="/css/owl.carousel.min.css" />
    <link rel="stylesheet" href="/css/select2-bootstrap4.min.css" />
    <link rel="stylesheet" href="/css/select2.min.css" />
    <link rel="stylesheet" href="/css/slick-animation.css" />
    <link rel="stylesheet" href="/css/slick-theme.css" />
    <link rel="stylesheet" href="/css/slick.css" />
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.2/css/all.min.css" />
    <link rel="shortcut icon" href="https://www.netflix.com/in/favicon.ico" type="image/x-icon">

    <style>
        .content {
            width: 100%;
            height: auto;
        }

        .video-container {
            padding-top: 120px;
            display: flex;
            justify-content: center;
            align-items: center;
            height: 100%;
            width: 100%;
        }

        .plyr {
            width: 65%;
            margin: auto;
        }

        #player {
            max-width: 100%;
            width: 100%;
            height: 100%;
        }

        footer.iq-bg-dark {
            margin-top: 600px;
        }

        .dt-content {
            position: absolute;
            top: 250px;
            display: flex;
            flex-direction: column;
            height: auto;
            background-color: #2e2d2d;
            border-radius: 0 10px 10px 0;
            color: #b0b0b0;
            font-size: 12px;
            width: 70px;
        }


        .dt-btn {
            height: 50px;
            text-align: center;
            align-content: center;
            cursor: pointer;
        }

            .dt-btn:hover {
                background-color: #474747;
            }

            .dt-btn a {
                display: block;
                text-decoration: none;
            }
    </style>
</head>
<body>
    <div class="content">
        <div class="video-container">
            <video id="player" controls></video>
        </div>
        <div class="dt-content">
            <div class="dt-btn" style="border-radius: 0 10px 0 0;">
                <a href="@Url.Action("Details", "movies", new { id = Model.movieID })">
                    <i class="fas fa-angle-left"></i>
                    <br /> Detail
                </a>
            </div>
            <div class="dt-btn">
                <i class="fas fa-star"></i>
                <br />Rate it
            </div>
            <div class="dt-btn">
                <i class="fas fa-share"></i> 
                <br />Share this
            </div>
            <div class="dt-btn">
                <i class="fas fa-heart"></i>
                <br />Favarite
            </div>
            <div class="dt-btn" style="border-radius: 0 0 10px 0;">
                <i class="fas fa-lightbulb"></i>
                <br />Off light
            </div>
        </div>
        
    </div>
    <script src="//cdn.jsdelivr.net/npm/hls.js@1"></script>
    <script src="https://cdn.plyr.io/3.7.8/plyr.js"></script>
    <script>
        document.addEventListener('DOMContentLoaded', () => {
            var video = document.getElementById('player');
            var source = 'https://3712b2ea.playingmovie.pages.dev/ForrestGump.m3u8';
            const defaultOptions = {};
            if (Hls.isSupported()) {
                const hls = new Hls();
                hls.loadSource(source);
                hls.on(Hls.Events.MANIFEST_PARSED, function (event, data) {
                    const availableQualities = hls.levels.map((l) => l.height)
                    defaultOptions.controls =
                        [
                            'play-large', // The large play button in the center
                            'restart', // Restart playback
                            'rewind', // Rewind by the seek time (default 10 seconds)
                            'play', // Play/pause playback
                            'fast-forward', // Fast forward by the seek time (default 10 seconds)
                            'progress', // The progress bar and scrubber for playback and buffering
                            'current-time', // The current time of playback
                            'duration', // The full duration of the media
                            'mute', // Toggle mute
                            'volume', // Volume control
                            'captions', // Toggle captions
                            'settings', // Settings menu
                            'pip', // Picture-in-picture (currently Safari only)
                            'airplay', // Airplay (currently Safari only)
                            'download', // Show a download button with a link to either the current source or a custom URL you specify in your options
                            'fullscreen', // Toggle fullscreen
                        ];
                    defaultOptions.quality = {
                        default: availableQualities[0],
                        options: availableQualities,
                        forced: true,
                        onChange: (e) => updateQuality(e)
                    }
                    new Plyr(video, defaultOptions);
                });
                hls.attachMedia(video);
                window.hls = hls;
            }
            function updateQuality(newQuality) {
                window.hls.levels.forEach((level, levelIndex) => {
                    if (level.height === newQuality) {
                        window.hls.currentLevel = levelIndex
                    }
                })
            }
        })
    </script>
</body>

