@model NetflixClone.Models.movie

@{
    ViewBag.Tittle = "Playing movie";
    int movieId = ViewBag.MovieId;
    NetflixClone.Models.Model1 db = new NetflixClone.Models.Model1();
}

<head>
    <title>@Html.DisplayFor(m => m.movieName)</title>
    <link rel="stylesheet" href="https://cdn.plyr.io/3.7.8/plyr.css" />

    <link rel="stylesheet" href="/css/owl.carousel.min.css" />

    <link rel="stylesheet" href="/css/slick-animation.css" />
    <link rel="stylesheet" href="/css/slick-theme.css" />
    <link rel="stylesheet" href="/css/slick.css" />
    <link rel="stylesheet" href="~/Content/MainPage/fontawesome-free-6.5.2-web/fontawesome-free-6.5.2-web/css/all.min.css">
    <link rel="shortcut icon" href="https://www.netflix.com/in/favicon.ico" type="image/x-icon">
    <link rel="stylesheet" href="~/Content/ReviewResource/css/single.css" />
    <link rel="stylesheet" href="~/Content/ReviewResource/list-css/list.css" />

    <style>
        .content {
            width: 100%;
            height: auto;
        }

        .video-container {
            padding-top: 120px;
            display: flex;
            justify-content: center;
            align-items: center;
            height: 100%;
            width: 100%;
        }

        .plyr {
            width: 68%;
            margin: auto;
        }

        #player {
            max-width: 100%;
            width: 100%;
            height: 100%;
        }

        footer.iq-bg-dark {
            margin-top: 100px;
        }
        footer{
            position: relative;
        }


        .dt-content {
            position: absolute;
            top: 250px;
            display: flex;
            flex-direction: column;
            height: auto;
            background-color: #2e2d2d;
            border-radius: 0 10px 10px 0;
            color: #b0b0b0;
            font-size: 12px;
            width: 70px;
        }


        .dt-btn {
            height: 50px;
            text-align: center;
            align-content: center;
            cursor: pointer;
        }

            .dt-btn:hover {
                background-color: #474747;
            }

            .dt-btn a {
                display: block;
                text-decoration: none;
            }

        .inf-mv {
            position: relative;
            top: 70px;
            background: linear-gradient(to bottom, rgba(0,0,0,0.8), rgba(0,0,0,0.6)), url("@String.Concat("https://image.tmdb.org/t/p/w500", @Model.backdropPath)");
            background-size: cover;
            display: flex;
            margin: 0 auto;
            padding: 50px 250px;
        }

        .inf-mv img{
            width: 200px;
            margin-right: 50px;

        }
        .text-primary{
            padding: 5px 0;
        }


    </style>
</head>

<body>
    <div class="content">
        <div class="video-container">
            <video id="player" controls></video>
        </div>
        <div class="dt-content">
            <div class="dt-btn" style="border-radius: 0 10px 0 0;">
                <a href="@Url.Action("Details", "movies", new { id = Model.movieID })">
                    <i class="fas fa-angle-left"></i>
                    <br /> Detail
                </a>
            </div>
            <div class="dt-btn">
                <i class="fas fa-star"></i>
                <br />Rate it
            </div>
            <div class="dt-btn">
                <i class="fas fa-share"></i>
                <br />Share this
            </div>
            <div class="dt-btn">
                <i class="fas fa-heart"></i>
                <br />Favarite
            </div>
            <div class="dt-btn" style="border-radius: 0 0 10px 0;">
                <i class="fas fa-lightbulb"></i>
                <br />Off light
            </div>
        </div>

        <div class="inf-mv">
            <img class="poster-image" src="@String.Concat("https://image.tmdb.org/t/p/w500", @Model.posterPath)" alt="@Model.movieName">
            <div>
                <h1 style="font-size: 40px;" class="slider-text big-title title text-uppercase" data-animation-in="fadeInLeft"
                    data-delay-in="0.6">
                    @Html.DisplayFor(model => model.movieName)
                </h1>
                <div class="d-flex flex-wrap align-items-center fadeInLeft animated" data-animation-in="fadeInLeft"
                     style="opacity: 1">
                    <div class="slider-ratting d-flex align-items-center mr-4 mt-2 mt-md-3">
                        <ul class="ratting-start p-0 m-0 list-inline text-primary d-flex align-items-center justify-content-left">
                            <li><i class="fa fa-star"></i></li>
                            <li><i class="fa fa-star"></i></li>
                            <li><i class="fa fa-star"></i></li>
                            <li><i class="fa fa-star"></i></li>
                            <li><i class="fa fa-star-half"></i></li>
                        </ul>
                        <span class="text-white ml-2">@Html.DisplayFor(model => model.voteAverage)</span>
                    </div>
                    <div class="d-flex align-items-center mt-2 mt-md-3">
                        <span class="badge badge-secondary p-2">16+</span>
                        <span class="ml-3">@Html.DisplayFor(model => model.runtime) (minutes)</span>
                    </div>
                </div>
                <p data-animation-in="fadeInUp">
                    @Html.DisplayFor(model => model.overview)
                </p>
                <div class="trending-list" data-animation-in="fadeInUp" data-delay-in="1.2">
                    <div class="text-primary title starring">
                        Original name:
                        <span class="text-body">
                            @Html.DisplayFor(model => model.originalMovieName)
                        </span>
                    </div>
                    <div class="text-primary title genres">
                        Genres : <span class="text-body">
                            @foreach (var genre in Model.genres)
                            {
                                @genre.genreName
                                if (!genre.Equals(Model.genres.Last()))
                                {
                                    <span>, </span>
                                }
                            }
                        </span>
                    </div>
                    <div class="text-primary title tag">
                        Tags :
                        <span class="text-body">@Html.DisplayFor(model => model.tags) </span>
                    </div>
                </div>
            </div>

        </div>


        <div class="all-comments">
            <p class="tt-cmt">Comments</p>
            <div class="all-comments-info">
                <div class="agile-info-wthree-box" id="comments-form">
                    <!-- Form comment/review -->

                    @using (Html.BeginForm("Add", "Review", FormMethod.Post))
                    {
                        <div class="input-box" id="input1">
                            @Html.TextBox("Name", null, new { required = "required", placeholder = "Name" })
                        </div>
                        <div class="input-box" id="input1">
                            @Html.TextBox("Email", null, new { required = "required", placeholder = "email" })
                        </div>
                        <div class="input-box" id="input1">
                            @Html.TextBox("Message", null, new { required = "required", placeholder = "message" })
                        </div>
                        @Html.Hidden("id", (int)ViewBag.MovieId)
                        <button type="submit">
                            <i class="fas fa-paper-plane"></i>
                        </button>
                    }
                    <div class="clearfix"> </div>

                </div>
            </div>
            <div class="media-grids" id="comments-list">
                <!-- Existing comments will be dynamically added here -->
            </div>
            @foreach (var r in Model.reviews)
            {
                    <div class="media-left">
                        <a href="#">
                            <img src="/Content/ReviewResource/images/user.jpg" title="One movies" alt=" " />
                        </a>
                    </div>
                    <div class="media-body">
                        <h5>@r.user.userName</h5>
                        <p>@r.content</p>
                        <span><a href= "@Url.Action("Delete", "Review", new { id = r.reviewID, movieid = r.movieID })"> Delete </a></span>
                        
                    </div>
            }
            </div>


    </div>
    <script src="//cdn.jsdelivr.net/npm/hls.js@1"></script>
    <script src="https://cdn.plyr.io/3.7.8/plyr.js"></script>
    <script>
        document.addEventListener('DOMContentLoaded', () => {
            var video = document.getElementById('player');
            var source = 'https://3712b2ea.playingmovie.pages.dev/ForrestGump.m3u8';
            const defaultOptions = {};
            if (Hls.isSupported()) {
                const hls = new Hls();
                hls.loadSource(source);
                hls.on(Hls.Events.MANIFEST_PARSED, function (event, data) {
                    const availableQualities = hls.levels.map((l) => l.height)
                    defaultOptions.controls =
                        [
                            'play-large', // The large play button in the center
                            'restart', // Restart playback
                            'rewind', // Rewind by the seek time (default 10 seconds)
                            'play', // Play/pause playback
                            'fast-forward', // Fast forward by the seek time (default 10 seconds)
                            'progress', // The progress bar and scrubber for playback and buffering
                            'current-time', // The current time of playback
                            'duration', // The full duration of the media
                            'mute', // Toggle mute
                            'volume', // Volume control
                            'captions', // Toggle captions
                            'settings', // Settings menu
                            'pip', // Picture-in-picture (currently Safari only)
                            'airplay', // Airplay (currently Safari only)
                            'download', // Show a download button with a link to either the current source or a custom URL you specify in your options
                            'fullscreen', // Toggle fullscreen
                        ];
                    defaultOptions.quality = {
                        default: availableQualities[0],
                        options: availableQualities,
                        forced: true,
                        onChange: (e) => updateQuality(e)
                    }
                    new Plyr(video, defaultOptions);
                });
                hls.attachMedia(video);
                window.hls = hls;
            }
            function updateQuality(newQuality) {
                window.hls.levels.forEach((level, levelIndex) => {
                    if (level.height === newQuality) {
                        window.hls.currentLevel = levelIndex
                    }
                })
            }
        })
    </script>
    <script>
        document.addEventListener('DOMContentLoaded', async () => {
    // Function to fetch and display comments
    async function fetchAndDisplayComments() {
        try {
            const movieId = '@Model.movieID';
            const apiKey = '4c7a48492227a8ce26dceb363ea366cb';
            const apiUrl = `https://api.themoviedb.org/3/movie/${movieId}/reviews?api_key=${apiKey}`;

            const response = await fetch(apiUrl);
            const data = await response.json();

            const commentsList = document.getElementById('comments-list');

            // Clear previous comments
            commentsList.innerHTML = '';

            // Iterate over each comment and add it to the list
            data.results.forEach(comment => {
                const commentItem = document.createElement('div');
                commentItem.classList.add('media');
                commentItem.innerHTML = `

                    <div class="media-left">
                        <a href="#">
                            <img src="/Content/ReviewResource/images/user.jpg" title="One movies" alt=" " />
                        </a>
                    </div>
                    <div class="media-body">
                    <h5>${comment.author}</h5>
                        <p>${comment.content}</p>
                        <span>View all posts by :<a href="#"> Admin </a></span>
                    </div>
                `;
                commentsList.appendChild(commentItem);
            });
        } catch (error) {
            console.error('Error fetching comments:', error);
        }
    }

    // Call fetchAndDisplayComments function when the page loads
    fetchAndDisplayComments();
});

    </script>
</body>

