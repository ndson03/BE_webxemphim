@model IEnumerable<NetflixClone.Models.movie>

@{
    ViewBag.Title = "Movies page";
    NetflixClone.Models.Model1 db = new NetflixClone.Models.Model1();
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="~/Content/MainPage/fontawesome-free-6.5.2-web/fontawesome-free-6.5.2-web/css/all.min.css">
    <link href="~/Content/MainPage/moviezone.css" rel="stylesheet">
    <title>Netflix</title>
    <style>
        .movie-item {
            position: relative;
            width: calc(100% / 6 - 10px);
            flex-shrink: 0;
            margin-right: 10px;
        }

            .movie-item img {
                width: 100%;
                height: auto;
                display: block;
            }

        .movie-details {
            position: absolute;
            bottom: 0;
            left: 0;
            width: 100%;
            background-color: rgba(0, 0, 0, 0.7);
            padding: 5px;
            color: white;
            font-size: 14px;
            opacity: 0;
            transition: opacity 0.3s ease;
        }

        .movie-item:hover .movie-details {
            opacity: 1;
        }

        .prev-next-button {
            margin-top: 16px;
            border: none;
            position: absolute;
            top: 50%;
            width: 2%;
            padding-bottom: 2%;
            border-radius: 50%;
            background: none;
            transform: translateY(-50%);
            outline: none;
            cursor: pointer;
        }

        .prev-next-button:hover {
                background-color: white;
            }
        
        .prev-next-button:focus {
            outline: none;
        }
        .prev-next-button:active {
                background-color: gainsboro;
            }
        .previous {
            left: 15px;
        }

        .next {
            right: 15px;
        }

        .prev-next-button svg {
            position: absolute;
            left: 20%;
            top: 20%;
            width: 60%;
            height: 60%;
        }

        .arrow {
            fill: red;
        }

        .slider-container {
            position: relative;
            overflow: hidden;
            margin-top: 70px;
            width: 100%;
        }

        .slider {
            display: flex;
            transition: transform 0.8s ease-in-out;
            overflow-x: scroll;
            overflow-y: hidden;
            white-space: nowrap;
            scrollbar-width: none;
            -ms-overflow-style: none;
        }

            .slider::-webkit-scrollbar {
                display: none;
            }

        /* Video Styles */
        video {
            width: 100%;
            height: 100%;
            object-fit: cover;
            position: fixed;
            top: 0;
            left: 0;
            z-index: -1;
        }

        .tt-movies-list {
            padding-bottom: 16px;
            padding-left: 30px;
            font-weight: bold;
            font-size: 26px;
        }
    </style>
</head>
<body>
    <section class="container">
        <div class="head">
            <img src="~/Content/MainPage/assests/netflixlogo.png" alt="">
        </div>
    </section>
    <!-- Background Video -->
    <video autoplay loop muted>
        <source src="~/Content/SingleMovie/video/Y2meta.app%20-%20TRANSFORMERS%20_%20Trailer%20A%20%20%2006.2023.mp4" type="video/mp4" />
    </video>

    <!--Top rated movies-->
    <div class="slider-container" style="margin-top: 900px">
        <h4 class="tt-movies-list" >TOP RATED MOVIES</h4>
        <div class="slider">

            @foreach (var movie in Model)
            {
                if (movie.tags.Equals("topRated"))
                {
                    <div class="movie-item">
                        <a href="@Url.Action("Details", "movies", new { id = movie.movieID })" class="movie-link">
                            <img src="@movie.posterPath" alt="@movie.movieName">
                            <div class="movie-details">
                                <h5>@movie.movieName</h5>
                                <p>@movie.releaseDate</p>
                            </div>
                        </a>
                    </div>
                }

            }
        </div>
        <button class="prev-next-button previous">
            <svg viewbox="0 0 100 100">
                <path class="arrow" d="M 50,0 L 60,10 L 20,50 L 60,90 L 50,100 L 0,50 Z" transform=" translate(15,0)">
            </svg>
        </button>
        <button class="prev-next-button next">
            <svg viewbox="0 0 100 100">
                <path class="arrow" d="M 50,0 L 60,10 L 20,50 L 60,90 L 50,100 L 0,50 Z " transform="translate(85,100) rotate(180) ">
            </svg>
        </button>
    </div>

    <!--Now playing movies-->
    <div class="slider-container">
        <h4 class="tt-movies-list">NOW PLAYING MOVIES</h4>
        <div class="slider">
            @foreach (var movie in Model)
            {
                if (movie.tags.Equals("nowPlaying"))
                {
                    <div class="movie-item">
                        <a href="@Url.Action("Details", "movies", new { id = movie.movieID })" class="movie-link">
                            <img src="@movie.posterPath" alt="@movie.movieName">
                            <div class="movie-details">
                                <h5>@movie.movieName</h5>
                                <p>@movie.releaseDate</p>
                            </div>
                        </a>
                    </div>
                }

            }
        </div>
        <button class="prev-next-button previous">
            <svg viewbox="0 0 100 100">
                <path class="arrow" d="M 50,0 L 60,10 L 20,50 L 60,90 L 50,100 L 0,50 Z" transform=" translate(15,0)">
            </svg>
        </button>
        <button class="prev-next-button next">
            <svg viewbox="0 0 100 100">
                <path class="arrow" d="M 50,0 L 60,10 L 20,50 L 60,90 L 50,100 L 0,50 Z " transform="translate(85,100) rotate(180) ">
            </svg>
        </button>
    </div>

    <!--Highest budget movies-->
    <div class="slider-container">
        <h4 class="tt-movies-list">BLOCK-BUSTERS</h4>
        <div class="slider">
            @{
                var moviesWithBudget = Model.Where(m => m.budget.HasValue).OrderByDescending(m => m.budget);
            }
            @foreach (var movie in moviesWithBudget)
            {
                <div class="movie-item">
                    <a href="@Url.Action("Details", "movies", new { id = movie.movieID })" class="movie-link">
                        <img src="@movie.posterPath" alt="@movie.movieName">
                        <div class="movie-details">
                            <h5>@movie.movieName</h5>
                            <p>@movie.releaseDate</p>
                        </div>
                    </a>
                </div>

            }
        </div>
        <button class="prev-next-button previous">
            <svg viewbox="0 0 100 100">
                <path class="arrow" d="M 50,0 L 60,10 L 20,50 L 60,90 L 50,100 L 0,50 Z" transform=" translate(15,0)">
            </svg>
        </button>
        <button class="prev-next-button next">
            <svg viewbox="0 0 100 100">
                <path class="arrow" d="M 50,0 L 60,10 L 20,50 L 60,90 L 50,100 L 0,50 Z " transform="translate(85,100) rotate(180) ">
            </svg>
        </button>
    </div>

    <!--Highest score movies-->
    <div class="slider-container">
        <h4 class="tt-movies-list">HIGHEST SCORE MOVIES</h4>
        <div class="slider">
            @{
                var topScore = Model.Where(m => m.runtime.HasValue).OrderByDescending(m => m.runtime);
            }
            @foreach (var movie in topScore)
            {
                <div class="movie-item">
                    <a href="@Url.Action("Details", "movies", new { id = movie.movieID })" class="movie-link">
                        <img src="@movie.posterPath" alt="@movie.movieName">
                        <div class="movie-details">
                            <h5>@movie.movieName</h5>
                            <p>@movie.releaseDate</p>
                        </div>
                    </a>
                </div>
            }
        </div>
        <button class="prev-next-button previous">
            <svg viewbox="0 0 100 100">
                <path class="arrow" d="M 50,0 L 60,10 L 20,50 L 60,90 L 50,100 L 0,50 Z" transform=" translate(15,0)">
            </svg>
        </button>
        <button class="prev-next-button next">
            <svg viewbox="0 0 100 100">
                <path class="arrow" d="M 50,0 L 60,10 L 20,50 L 60,90 L 50,100 L 0,50 Z " transform="translate(85,100) rotate(180) ">
            </svg>
        </button>
    </div>

    <!--Audience recommendation-->
    <div class="slider-container">
        <h4 class="tt-movies-list">AUDIENCE RECOMMENDATION</h4>
        <div class="slider">
            @{
                var audience = Model.Where(m => m.voteCount.HasValue).OrderByDescending(m => m.voteCount);
            }
            @foreach (var movie in audience)
            {
                <div class="movie-item">
                    <a href="@Url.Action("Details", "movies", new { id = movie.movieID })" class="movie-link">
                        <img src="@movie.posterPath" alt="@movie.movieName">
                        <div class="movie-details">
                            <h5>@movie.movieName</h5>
                            <p>@movie.releaseDate</p>
                        </div>
                    </a>
                </div>
            }
        </div>
        <button class="prev-next-button previous">
            <svg viewbox="0 0 100 100">
                <path class="arrow" d="M 50,0 L 60,10 L 20,50 L 60,90 L 50,100 L 0,50 Z" transform=" translate(15,0)">
            </svg>
        </button>
        <button class="prev-next-button next">
            <svg viewbox="0 0 100 100">
                <path class="arrow" d="M 50,0 L 60,10 L 20,50 L 60,90 L 50,100 L 0,50 Z " transform="translate(85,100) rotate(180) ">
            </svg>
        </button>
    </div>

    <!--Rotten Tomatoes movies-->
    <div class="slider-container">
        <h4 class="tt-movies-list">FRESH ROTTEN TOMATOES</h4>
        <div class="slider">
            @{
                var rotten = Model.Where(m => m.revenue.HasValue).OrderByDescending(m => m.revenue);
            }
            @foreach (var movie in rotten)
            {
                <div class="movie-item">
                    <a href="@Url.Action("Details", "movies", new { id = movie.movieID })" class="movie-link">
                        <img src="@movie.posterPath" alt="@movie.movieName">
                        <div class="movie-details">
                            <h5>@movie.movieName</h5>
                            <p>@movie.releaseDate</p>
                        </div>
                    </a>
                </div>
            }
        </div>
        <button class="prev-next-button previous">
            <svg viewbox="0 0 100 100">
                <path class="arrow" d="M 50,0 L 60,10 L 20,50 L 60,90 L 50,100 L 0,50 Z" transform=" translate(15,0)">
            </svg>
        </button>
        <button class="prev-next-button next">
            <svg viewbox="0 0 100 100">
                <path class="arrow" d="M 50,0 L 60,10 L 20,50 L 60,90 L 50,100 L 0,50 Z " transform="translate(85,100) rotate(180) ">
            </svg>
        </button>
    </div>

    <script>
        document.addEventListener("DOMContentLoaded", function () {
            const sliderContainers = document.querySelectorAll(".slider-container");

            sliderContainers.forEach(function (container) {
                const slider = container.querySelector(".slider");
                const slides = slider.querySelectorAll(".movie-item");
                const totalSlides = slides.length;
                let currentIndex = 0;
                const slidesPerPage = 6;
                let intervalId = null;

                function showSlide(index) {
                    const slideWidth = slides[0].offsetWidth;
                    const startPosition = index * slidesPerPage * slideWidth;
                    slider.scrollTo({
                        left: startPosition,
                        behavior: 'smooth'
                    });
                }

                function nextSlide() {
                    currentIndex = (currentIndex + 1 < Math.ceil(totalSlides / slidesPerPage)) ? currentIndex + 1 : 0;
                    showSlide(currentIndex);
                }

                function prevSlide() {
                    currentIndex = (currentIndex > 0) ? currentIndex - 1 : Math.ceil(totalSlides / slidesPerPage) - 1;
                    showSlide(currentIndex);
                }

                function startAutoPlay() {
                    intervalId = setInterval(nextSlide, 4000);
                }

                function stopAutoPlay() {
                    clearInterval(intervalId);
                }

                startAutoPlay();

                // Show all slides
                showSlide(currentIndex);

                const prevButton = container.querySelector('.prev-next-button.previous');
                const nextButton = container.querySelector('.prev-next-button.next');

                prevButton.addEventListener('click', prevSlide);
                nextButton.addEventListener('click', nextSlide);


                slider.addEventListener('mouseenter', function (event) {
                    stopAutoPlay();

                });

                slider.addEventListener('mouseleave', function (event) {
                    startAutoPlay();
                });

            });
            

        });
    </script>
</body>
</html>