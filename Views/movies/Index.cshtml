@model IEnumerable<NetflixClone.Models.movie>

@{
    ViewBag.Title = "Movies page";
    NetflixClone.Models.Model1 db = new NetflixClone.Models.Model1();
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="~/Content/MainPage/fontawesome-free-6.5.2-web/fontawesome-free-6.5.2-web/css/all.min.css">
    <link href="~/Content/MainPage/moviezone.css" rel="stylesheet">
    <link href="~/Content/ndson_style.css" rel="stylesheet">

    <title>Netflix</title>

</head>
<body>
    <section class="container">
        <div class="head">
            <img src="~/Content/MainPage/assests/netflixlogo.png" alt="">
        </div>
    </section>
    <!-- Background Video -->
    <video autoplay loop muted>
        <source src="~/Content/SingleMovie/video/Y2meta.app%20-%20TRANSFORMERS%20_%20Trailer%20A%20%20%2006.2023.mp4" type="video/mp4" />
    </video>

    <!--Top rated movies-->
    <div class="slider-container" style="margin-top: 900px">
        <h4 class="tt-movies-list">TOP RATED MOVIES</h4>
        <div class="slider">

            @foreach (var movie in Model)
            {
                if (movie.tags.Equals("topRated"))
                {
                    <div class="movie-item" data-movieid="@movie.movieID">
                        <a href="@Url.Action("Details", "movies", new { id = movie.movieID })" class="movie-link">
                            <img src="@movie.posterPath" alt="@movie.movieName">
                            <div class="movie-details">
                                <video class="tl-vd" loop muted src="">
                                    <source src="" type="video/mp4">
                                    Your browser does not support the video tag.
                                </video>
                                <div class="dt">
                                    <p style="font-style: italic; color: lightgoldenrodyellow">@movie.releaseDate</p>
                                    <p><span style="color: red">@movie.voteAverage</span>/10</p>
                                    <h5>@movie.movieName</h5>
                                </div>
                            </div>
                        </a>
                    </div>
                }

            }
        </div>
        <button class="prev-next-button previous">
            <svg viewbox="0 0 100 100">
                <path class="arrow" d="M 50,0 L 60,10 L 20,50 L 60,90 L 50,100 L 0,50 Z" transform=" translate(15,0)" />
            </svg>
        </button>
        <button class="prev-next-button next">
            <svg viewbox="0 0 100 100">
                <path class="arrow" d="M 50,0 L 60,10 L 20,50 L 60,90 L 50,100 L 0,50 Z " transform="translate(85,100) rotate(180) " />
            </svg>
        </button>
    </div>

    <!--Now playing movies-->
    <div class="slider-container">
        <h4 class="tt-movies-list">NOW PLAYING MOVIES</h4>
        <div class="slider">
            @foreach (var movie in Model)
            {
                if (movie.tags.Equals("nowPlaying"))
                {
                    <div class="movie-item" data-movieid="@movie.movieID">
                        <a href="@Url.Action("Details", "movies", new { id = movie.movieID })" class="movie-link">
                            <img src="@movie.posterPath" alt="@movie.movieName">
                            <div class="movie-details">
                                <video class="tl-vd" loop muted src=""></video>
                                <div class="dt">
                                    <p style="font-style: italic; color: lightgoldenrodyellow">@movie.releaseDate</p>
                                    <p><span style="color: red">@movie.voteAverage</span>/10</p>
                                    <h5>@movie.movieName</h5>
                                </div>
                            </div>
                        </a>
                    </div>
                }

            }
        </div>
        <button class="prev-next-button previous">
            <svg viewbox="0 0 100 100">
                <path class="arrow" d="M 50,0 L 60,10 L 20,50 L 60,90 L 50,100 L 0,50 Z" transform=" translate(15,0)" />
            </svg>
        </button>
        <button class="prev-next-button next">
            <svg viewbox="0 0 100 100">
                <path class="arrow" d="M 50,0 L 60,10 L 20,50 L 60,90 L 50,100 L 0,50 Z " transform="translate(85,100) rotate(180) " />
            </svg>
        </button>
    </div>

    <!--Highest budget movies-->
    <div class="slider-container">
        <h4 class="tt-movies-list">BLOCK-BUSTERS</h4>
        <div class="slider">
            @{
                var moviesWithBudget = Model.Where(m => m.budget.HasValue).OrderByDescending(m => m.budget);
            }
            @foreach (var movie in moviesWithBudget)
            {
                <div class="movie-item" data-movieid="@movie.movieID">
                    <a href="@Url.Action("Details", "movies", new { id = movie.movieID })" class="movie-link">
                        <img src="@movie.posterPath" alt="@movie.movieName">
                        <div class="movie-details">
                            <video class="tl-vd" loop muted src=""></video>                            <div class="dt">
                                <p style="font-style: italic; color: lightgoldenrodyellow">@movie.releaseDate</p>
                                <p><span style="color: red">@movie.voteAverage</span>/10</p>
                                <h5>@movie.movieName</h5>
                            </div>
                        </div>
                    </a>
                </div>

            }
        </div>
        <button class="prev-next-button previous">
            <svg viewbox="0 0 100 100">
                <path class="arrow" d="M 50,0 L 60,10 L 20,50 L 60,90 L 50,100 L 0,50 Z" transform=" translate(15,0)" />
            </svg>
        </button>
        <button class="prev-next-button next">
            <svg viewbox="0 0 100 100">
                <path class="arrow" d="M 50,0 L 60,10 L 20,50 L 60,90 L 50,100 L 0,50 Z " transform="translate(85,100) rotate(180) " />
            </svg>
        </button>
    </div>

    <!--Highest score movies-->
    <div class="slider-container">
        <h4 class="tt-movies-list">HIGHEST SCORE MOVIES</h4>
        <div class="slider">
            @{
                var topScore = Model.Where(m => m.runtime.HasValue).OrderByDescending(m => m.runtime);
            }
            @foreach (var movie in topScore)
            {
                <div class="movie-item" data-movieid="@movie.movieID">
                    <a href="@Url.Action("Details", "movies", new { id = movie.movieID })" class="movie-link">
                        <img src="@movie.posterPath" alt="@movie.movieName">
                        <div class="movie-details">
                            <video class="tl-vd" loop muted src=""></video>
                            <div class="dt">
                                <p style="font-style: italic; color: lightgoldenrodyellow">@movie.releaseDate</p>
                                <p><span style="color: red">@movie.voteAverage</span>/10</p>
                                <h5>@movie.movieName</h5>
                            </div>
                        </div>
                    </a>
                </div>
            }
        </div>
        <button class="prev-next-button previous">
            <svg viewbox="0 0 100 100">
                <path class="arrow" d="M 50,0 L 60,10 L 20,50 L 60,90 L 50,100 L 0,50 Z" transform=" translate(15,0)" />
            </svg>
        </button>
        <button class="prev-next-button next">
            <svg viewbox="0 0 100 100">
                <path class="arrow" d="M 50,0 L 60,10 L 20,50 L 60,90 L 50,100 L 0,50 Z " transform="translate(85,100) rotate(180) " />
            </svg>
        </button>
    </div>

    <!--Audience recommendation-->
    <div class="slider-container">
        <h4 class="tt-movies-list">AUDIENCE RECOMMENDATION</h4>
        <div class="slider">
            @{
                var audience = Model.Where(m => m.voteCount.HasValue).OrderByDescending(m => m.voteCount);
            }
            @foreach (var movie in audience)
            {
                <div class="movie-item" data-movieid="@movie.movieID">
                    <a href="@Url.Action("Details", "movies", new { id = movie.movieID })" class="movie-link">
                        <img src="@movie.posterPath" alt="@movie.movieName">
                        <div class="movie-details">
                            <video class="tl-vd" loop muted src=""></video>                            <div class="dt">
                                <p style="font-style: italic; color: lightgoldenrodyellow">@movie.releaseDate</p>
                                <p><span style="color: red">@movie.voteAverage</span>/10</p>
                                <h5>@movie.movieName</h5>
                            </div>
                        </div>
                    </a>
                </div>
            }
        </div>
        <button class="prev-next-button previous">
            <svg viewbox="0 0 100 100">
                <path class="arrow" d="M 50,0 L 60,10 L 20,50 L 60,90 L 50,100 L 0,50 Z" transform=" translate(15,0)" />
            </svg>
        </button>
        <button class="prev-next-button next">
            <svg viewbox="0 0 100 100">
                <path class="arrow" d="M 50,0 L 60,10 L 20,50 L 60,90 L 50,100 L 0,50 Z " transform="translate(85,100) rotate(180) " />
            </svg>
        </button>
    </div>

    <!--Rotten Tomatoes movies-->
    <div class="slider-container">
        <h4 class="tt-movies-list">FRESH ROTTEN TOMATOES</h4>
        <div class="slider">
            @{
                var rotten = Model.Where(m => m.revenue.HasValue).OrderByDescending(m => m.revenue);
            }
            @foreach (var movie in rotten)
            {
                <div class="movie-item" data-movieid="@movie.movieID">
                    <a href="@Url.Action("Details", "movies", new { id = movie.movieID })" class="movie-link">
                        <img src="@movie.posterPath" alt="@movie.movieName">
                        <div class="movie-details">
                            <video class="tl-vd" loop muted src=""></video>                            <div class="dt">
                                <p style="font-style: italic; color: lightgoldenrodyellow">@movie.releaseDate</p>
                                <p><span style="color: red">@movie.voteAverage</span>/10</p>
                                <h5>@movie.movieName</h5>
                            </div>
                        </div>
                    </a>
                </div>
            }
        </div>
        <button class="prev-next-button previous">
            <svg viewbox="0 0 100 100">
                <path class="arrow" d="M 50,0 L 60,10 L 20,50 L 60,90 L 50,100 L 0,50 Z" transform=" translate(15,0)" />
            </svg>
        </button>
        <button class="prev-next-button next">
            <svg viewbox="0 0 100 100">
                <path class="arrow" d="M 50,0 L 60,10 L 20,50 L 60,90 L 50,100 L 0,50 Z " transform="translate(85,100) rotate(180) " />
            </svg>
        </button>
    </div>

    <!--Slider function-->
    <!--<script>
        document.addEventListener("DOMContentLoaded", function () {
            const sliderContainers = document.querySelectorAll(".slider-container");

            sliderContainers.forEach(function (container) {
                const slider = container.querySelector(".slider");
                const slides = slider.querySelectorAll(".movie-item");
                const totalSlides = slides.length;
                let currentIndex = 0;
                const slidesPerPage = 6;
                let intervalId = null;

                function showSlide(index) {
                    const slideWidth = slides[0].offsetWidth;
                    const startPosition = index * slidesPerPage * slideWidth;
                    slider.scrollTo({
                        left: startPosition,
                        behavior: 'smooth'
                    });
                }

                function nextSlide() {
                    currentIndex = (currentIndex + 1 < Math.ceil(totalSlides / slidesPerPage)) ? currentIndex + 1 : 0;
                    showSlide(currentIndex);
                }

                function prevSlide() {
                    currentIndex = (currentIndex > 0) ? currentIndex - 1 : Math.ceil(totalSlides / slidesPerPage) - 1;
                    showSlide(currentIndex);
                }

                function startAutoPlay() {
                    intervalId = setInterval(nextSlide, 4000);
                }

                function stopAutoPlay() {
                    clearInterval(intervalId);
                }

                startAutoPlay();

                // Show all slides
                showSlide(currentIndex);

                const prevButton = container.querySelector('.prev-next-button.previous');
                const nextButton = container.querySelector('.prev-next-button.next');

                prevButton.addEventListener('click', prevSlide);
                nextButton.addEventListener('click', nextSlide);


                slider.addEventListener('mouseenter', function (event) {
                    stopAutoPlay();

                });

                slider.addEventListener('mouseleave', function (event) {
                    startAutoPlay();
                });

                const videos = container.querySelectorAll("video");

                function startPreview(video) {
                    video.muted = true;
                    video.currentTime = 1;
                    video.playbackRate = 0.5;
                    video.play();
                }

                function stopPreview(video) {
                    video.currentTime = 0;
                    video.playbackRate = 1;
                    video.pause();
                }

                videos.forEach((video) => {
                    const movieItem = video.closest(".movie-item");

                    movieItem.addEventListener("mouseenter", () => {
                        startPreview(video);
                    });

                    movieItem.addEventListener("mouseleave", () => {
                        stopPreview(video);
                    });
                });


            });
        });
    </script>-->

    <script>
        document.addEventListener("DOMContentLoaded", function () {
            const apiKey = '4c7a48492227a8ce26dceb363ea366cb'; // Replace with your actual TMDB API Key

            const sliderContainers = document.querySelectorAll(".slider-container");

            sliderContainers.forEach(function (container) {
                const slider = container.querySelector(".slider");
                const slides = slider.querySelectorAll(".movie-item");
                const totalSlides = slides.length;
                let currentIndex = 0;
                const slidesPerPage = 6;
                let intervalId = null;

                function showSlide(index) {
                    const slideWidth = slides[0].offsetWidth;
                    const startPosition = index * slidesPerPage * slideWidth;
                    slider.scrollTo({
                        left: startPosition,
                        behavior: "smooth",
                    });
                }

                function nextSlide() {
                    currentIndex =
                        currentIndex + 1 < Math.ceil(totalSlides / slidesPerPage)
                            ? currentIndex + 1
                            : 0;
                    showSlide(currentIndex);
                }

                function prevSlide() {
                    currentIndex = currentIndex > 0 ? currentIndex - 1 : Math.ceil(totalSlides / slidesPerPage) - 1;
                    showSlide(currentIndex);
                }

                function startAutoPlay() {
                    intervalId = setInterval(nextSlide, 4000);
                }

                function stopAutoPlay() {
                    clearInterval(intervalId);
                }

                startAutoPlay();

                // Show all slides
                showSlide(currentIndex);

                const prevButton = container.querySelector(".prev-next-button.previous");
                const nextButton = container.querySelector(".prev-next-button.next");

                prevButton.addEventListener("click", prevSlide);
                nextButton.addEventListener("click", nextSlide);

                slider.addEventListener("mouseenter", function (event) {
                    stopAutoPlay();
                });

                slider.addEventListener("mouseleave", function (event) {
                    startAutoPlay();
                });

                const videos = container.querySelectorAll("video");

                function startPreview(video) {
                    video.muted = true;
                    video.currentTime = 0; // Reset video time to the beginning
                    video.play();
                }

                function stopPreview(video) {
                    video.pause();
                }

                videos.forEach((video) => {
                    const movieItem = video.closest(".movie-item");

                    movieItem.addEventListener("mouseenter", () => {
                        startPreview(video);
                    });

                    movieItem.addEventListener("mouseleave", () => {
                        stopPreview(video);
                    });

                    const movieId = movieItem.dataset.movieid;

                    fetch(`https://api.themoviedb.org/3/movie/${movieId}/videos?api_key=${apiKey}`)
                        .then((response) => response.json())
                        .then((data) => {
                            console.log("Trailer data:", data); // Log the trailer data

                            if (Array.isArray(data.results)) {
                                const videoInfo = data.results.find((video) => video.site === "YouTube");

                                if (videoInfo) {
                                    const videoUrl = `https://www.youtube.com/embed/${videoInfo.key}`;
                                    video.src = videoUrl; // Set the video source dynamically
                                } else {
                                    console.warn("No trailer found for movie:", movieId);
                                }
                            } else {
                                console.warn("Trailer data not an array:", data);
                            }
                        })
                        .catch((error) => console.error("Error fetching trailer:", error));
                });
            });
        });
    </script>
</body>
</html>