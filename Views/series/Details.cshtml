@model NetflixClone.Models.series

@{
    ViewBag.Title = "Series detail";
    NetflixClone.Models.Model1 db = new NetflixClone.Models.Model1();
}

<head>
    <link href="~/Content/ndson_style.css" rel="stylesheet">
    <link rel="stylesheet" href="~/Content/MainPage/fontawesome-free-6.5.2-web/fontawesome-free-6.5.2-web/css/all.min.css">
</head>

<style>
    .video-background {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        overflow: hidden;
        z-index: -1;
    }

    #trailer-video {
        width: 100%;
        height: 100%;
        object-fit: cover;
    }


    #trailer-video {
        pointer-events: none;
    }


        #trailer-video::-webkit-media-controls-start-playback-button {
            display: none;
        }

    .movie-details-container {
        min-height: 100vh;
        height: auto;
        flex-direction: column;
        justify-content: center;
        align-items: center;
    }

    .slick-bg.s-bg-1 {
        height: auto !important;
    }

    .serie-item {
        position: relative;
        width: calc(100% / 6 - 10px);
        flex-shrink: 0;
        margin-right: 10px;
        transition: transform 0.3s ease
    }


    .ss-ep-details {
        position: absolute;
        inset: 0; /* Stretches to all sides (top, right, bottom, left) */
        
        padding: 5px;
        color: white;
        font-size: 14px;
        opacity: 0;
        transition: opacity 0.3s ease;
        overflow-wrap: break-word;
    }

    .serie-item:hover {
        border-top: 0;
        transform: scale(1.1); /* Increase size slightly on hover */
        z-index: 0;
        position: relative;
    }
    .serie-item:hover img {
        border-bottom: 4px solid red;
    }

    .serie-item:hover .ss-ep-name {
        display: none;
    }

    .ss-ep-details {
        position: absolute;
        bottom: 26px;
        left: 0;
        right: 0;
        padding: 5px 20px;
        color: white;
        font-size: 14px;
        background: linear-gradient(to top, rgba(0,0,0,1) 0%,rgba(0,0,0,0.1) 100%);
        opacity: 0;
        top: 220px;
        transform: translateY(100%);
        transition: transform 0.4s cubic-bezier(0.25, 0.1, 0.25, 1), opacity 0.3s ease; /* Cải tiến hiệu ứng chuyển động */
    }

    .serie-item:hover .ss-ep-details {
        opacity: 1;
        transform: translateY(0);
    }


    h5 {
        padding-top: 5px;
        font-size: 18px;
        font-weight: bold;
        overflow: hidden;
    }

    #home-slider  p {
        font-size: 12px;
        padding: 0;
        margin: 0;
        width: 100%;
        word-break: break-word;
        white-space: pre-line;
    }

  


  




</style>

<!-- slider starts  -->
<section id="home" class="iq-main-slider p-0">
    <div id="home-slider" class="slider m-0 p-0" style="display: grid; grid-auto-rows: auto;">
        <div class="slide slick-bg s-bg-1" >
            <div class="video-background">
                <iframe id="trailer-video" allow="autoplay; encrypted-media" allowfullscreen></iframe>
            </div>
            <div class="container-fluid position-relative movie-details-container" >
                <div class="slider-inner">
                    <div class="row align-items-center">
                        <div class="col-xl-6 col-lg-12 col-md-12">
                            <a href="javascript:void(0)">
                                <div class="channel-logo" data-animation-in="fadeInLeft" data-delay-in="0.5">
                                    <img src="~/Content/SingleMovie/images/logo.png" class="c-logo" alt="" />
                                </div>
                            </a>
                            <h1 class="slider-text big-title title text-uppercase" data-animation-in="fadeInLeft"
                                data-delay-in="0.6">
                                @Html.DisplayFor(model => model.serieName)
                            </h1>
                            <div class="d-flex flex-wrap align-items-center fadeInLeft animated" data-animation-in="fadeInLeft"
                                 style="opacity: 1">
                                <div class="slider-ratting d-flex align-items-center mr-4 mt-2 mt-md-3">
                                    <ul class="ratting-start p-0 m-0 list-inline text-primary d-flex align-items-center justify-content-left">
                                        <li><i class="fa fa-star"></i></li>
                                        <li><i class="fa fa-star"></i></li>
                                        <li><i class="fa fa-star"></i></li>
                                        <li><i class="fa fa-star"></i></li>
                                        <li><i class="fa fa-star-half"></i></li>
                                    </ul>
                                    <span class="text-white ml-2">7.3(imbd)</span>
                                </div>
                                <div class="d-flex align-items-center mt-2 mt-md-3">
                                    <span class="badge badge-secondary p-2">16+</span>
                                    <span class="ml-3">@Html.DisplayFor(model => model.numberOfSeasons) (seasons)</span>
                                </div>
                            </div>
                            <p data-animation-in="fadeInUp" style="white-space: pre-wrap;">
                                @Html.DisplayFor(model => model.overview)
                            </p>
                            <div class="trending-list" data-animation-in="fadeInUp" data-delay-in="1.2">
                                <div class="text-primary title starring">
                                    Original name:
                                    <span class="text-body">
                                        @Html.DisplayFor(model => model.originalSerieName)
                                    </span>
                                </div>
                                <div class="text-primary title genres">
                                    Genres : <span class="text-body">
                                        @foreach (var genre in Model.genres)
                                        {
                                            @genre.genreName
                                            if (!genre.Equals(Model.genres.Last()))
                                            {
                                                <span>, </span>
                                            }
                                        }
                                    </span>
                                </div>
                                <div class="text-primary title tag">
                                    Tags :
                                    <span class="text-body">@Html.DisplayFor(model => model.tags) </span>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="slider-container" style="margin-top: 300px;">
                    <h4 class="tt-series-list">SEASONS:</h4>
                    <div class="slider">
                        @foreach (var season in db.seasons)
                        {
                            if (season.serieID.Equals(Model.serieID))
                            {
                                <div class="serie-item">
                                    <a href="@Url.Action("Details", "seasons", new { id = season.seasonID })" class="season-link">
                                        <div class="season-poster">
                                            @{
                                                string path = "https://image.tmdb.org/t/p/w500/";
                                            }
                                            <img class="poster-image" src="@Url.Content(path + season.posterPath)" alt="@season.seasonName">

                                        </div>
                                        <div class="ss-ep-details">
                                            <p style="font-style: italic; color: lightgoldenrodyellow">season: @season.seasonNumber</p>
                                            <span class="stars" style="color: yellow; font-size: 10px; align-items:center;">
                                                <i class="far fa-star"></i>
                                                <i class="far fa-star"></i>
                                                <i class="far fa-star"></i>
                                                <i class="far fa-star"></i>
                                                <i class="far fa-star"></i>
                                            </span>
                                            <span class="vt_avg" style="color: red; font-weight:bold;">@season.voteAverage</span><span style="font-size: 12px;">/10</span>
                                            <h5>@season.seasonName</h5>
                                        </div>
                                       <h5 class="ss-ep-name" style="text-align:center">@season.seasonName</h5>
                                    </a>
                                </div>
                            }

                        }
                    </div>
                    <button class="prev-next-button previous">
                        <svg viewbox="0 0 100 100">
                            <path class="arrow" d="M 50,0 L 60,10 L 20,50 L 60,90 L 50,100 L 0,50 Z" transform=" translate(15,0)">
                        </svg>
                    </button>
                    <button class="prev-next-button next">
                        <svg viewbox="0 0 100 100">
                            <path class="arrow" d="M 50,0 L 60,10 L 20,50 L 60,90 L 50,100 L 0,50 Z " transform="translate(85,100) rotate(180) ">
                        </svg>
                    </button>
                </div>
            </div>
        </div>
    </div>
</section>
<!-- slider ends -->
<!-- main content starts  -->
<div class="main-content">
    <!--top rated section starts   -->
    <section id="iq-favorites">
        <div class="container-fluid">
            <div class="row">
                <div class="col-sm-12 overflow-hidden">
                    <div class="iq-main-header d-flex align-items-center justify-content-between">
                        <h4 class="main-title">Top Rated Series</h4>
                        <a href="#" class="iq-view-all">View All</a>
                    </div>
                    <div class="favorite-contens">
                        @Html.Partial("SeriesList_TopRated", db.series.ToList())
                    </div>
                </div>
            </div>
        </div>
    </section>
    <!-- top rated section ends -->
    <!--popular section starts  -->
    <section id="iq-upcoming-movie">
        <div class="container-fluid">
            <div class="row">
                <div class="col-sm-12 overflow-hidden">
                    <div class="iq-main-header d-flex align-items-center justify-content-between">
                        <h4 class="main-title">Airing Today</h4>
                        <a href="#" class="iq-view-all">View All</a>
                    </div>
                    <div class="favorite-contens">
                        @Html.Partial("SeriesList_AiringToday", db.series.ToList())
                    </div>
                </div>
            </div>
        </div>
    </section>
    <!-- popular section ends -->
    <!-- top ten trending  -->
    <section id="iq-topten">
        <div class="container-fluid">
            <div class="row">
                <div class="col-sm-12 overflow-hidden">
                    <div class="topten-contents">
                        <h4 class="main-title iq-title topten-title">
                            Top 10 Audience Vote
                        </h4>
                        @Html.Partial("SeriesList_Top10", db.series.ToList())
                    </div>
                </div>
            </div>
        </div>
    </section>
    <!--suggested tv shows-->
    <section id="iq-suggested" class="s-margin">
        <div class="container-fluid">
            <div class="row">
                <div class="col-sm-12 overflow-hidden">
                    <div class="iq-main-header d-flex align-items-center justify-content-between">
                        <h4 class="main-title">Suggested Movies</h4>
                        <a href="#" class="iq-view-all">View All</a>
                    </div>
                    <div class="favorite-contens">
                        @Html.Partial("MovieList_Suggested", db.movies.ToList())
                    </div>
                </div>
            </div>
        </div>
    </section>
</div>
<!-- main content ends  -->

<script src="~/Content/star_vote.js"></script>
<script>
    const apiKey = '4c7a48492227a8ce26dceb363ea366cb';
    const movieId = '@Model.serieID';

    const trailerVideo = document.getElementById('trailer-video');

    fetch(`https://api.themoviedb.org/3/tv/${movieId}/videos?api_key=${apiKey}`)
        .then(response => response.json())
        .then(data => {
            const videos = data.results;

            videos.forEach(video => {
                if (video.site === 'YouTube') {
                    trailerVideo.src = `https://www.youtube.com/embed/${video.key}?autoplay=1&controls=0&loop=1&mute=0`;
                }
            });
        })
        .catch(error => console.error('Error fetching trailer:', error));
</script>

<script>
    document.addEventListener("DOMContentLoaded", function () {
        const sliderContainers = document.querySelectorAll(".slider-container");

        sliderContainers.forEach(function (container) {
            const slider = container.querySelector(".slider");
            const slides = slider.querySelectorAll(".serie-item");
            const totalSlides = slides.length;
            let currentIndex = 0;
            const slidesPerPage = 6;
            let intervalId = null;

            function showSlide(index) {
                const slideWidth = slides[0].offsetWidth;
                const startPosition = index * slidesPerPage * slideWidth;
                slider.scrollTo({
                    left: startPosition,
                    behavior: 'smooth'
                });
            }

            function nextSlide() {
                currentIndex = (currentIndex + 1 < Math.ceil(totalSlides / slidesPerPage)) ? currentIndex + 1 : 0;
                showSlide(currentIndex);
            }

            function prevSlide() {
                currentIndex = (currentIndex > 0) ? currentIndex - 1 : Math.ceil(totalSlides / slidesPerPage) - 1;
                showSlide(currentIndex);
            }

            function startAutoPlay() {
                intervalId = setInterval(nextSlide, 4000);
            }

            function stopAutoPlay() {
                clearInterval(intervalId);
            }

            startAutoPlay();

            // Show all slides
            showSlide(currentIndex);

            const prevButton = container.querySelector('.prev-next-button.previous');
            const nextButton = container.querySelector('.prev-next-button.next');

            prevButton.addEventListener('click', prevSlide);
            nextButton.addEventListener('click', nextSlide);

            slider.addEventListener('mouseenter', function (event) {
                stopAutoPlay();

            });

            slider.addEventListener('mouseleave', function (event) {
                startAutoPlay();
            });


            const videos = container.querySelectorAll("video");

            function startPreview(video) {
                video.muted = true;
                video.currentTime = 1;
                video.playbackRate = 0.5;
                video.play();
            }

            function stopPreview(video) {
                video.currentTime = 0;
                video.playbackRate = 1;
                video.pause();
            }

            videos.forEach((video) => {
                const serieItem = video.closest(".serie-item");

                serieItem.addEventListener("mouseenter", () => {
                    startPreview(video);
                });

                serieItem.addEventListener("mouseleave", () => {
                    stopPreview(video);
                });
            });
        });
    });
    //star rate
    let vt_avg_list = document.querySelectorAll('.vt_avg');
    vt_avg_list.forEach(vt_avg => {
        let stars = vt_avg.previousElementSibling.querySelectorAll('.fa-star');
        let a = parseFloat(vt_avg.innerText);
        setColorStar(a, stars);
    });
</script>
